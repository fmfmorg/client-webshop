---
import NoAddress from '@components/account-addresses/no-address.astro';
import Layout from '@components/layout/index.astro'
import AddressList from '@components/account-addresses/address-list.astro';
import { httpRequestHeader, sessionCookieOption, type IMdwResponse, type IShoppingBagSidebarProp, type IUserAddress } from '@misc'
import { FM_IS_ONLINE, FM_CLIENT_WEBSHOP_API_URL } from 'astro:env/server'
import { PUBLIC_FM_HEADER_CAROUSEL_OFF_COOKIE_KEY, PUBLIC_FM_ACCEPT_MEMBERSHIP } from 'astro:env/client'

interface IApiResponse {
    addresses:IUserAddress[];
}

const acceptMembership = PUBLIC_FM_ACCEPT_MEMBERSHIP === 'true'
if (!acceptMembership) return new Response(null,{status:404})

const isOnline = FM_IS_ONLINE === 'true'
const initialSessionID = Astro.cookies.get("sessionID")?.value || ""
const headerCarouselOff = Astro.cookies.has(PUBLIC_FM_HEADER_CAROUSEL_OFF_COOKIE_KEY)

const resp = await fetch(`${ FM_CLIENT_WEBSHOP_API_URL }/webshop/account-addresses-page-init`,{
    headers:httpRequestHeader(true,'SSR',true,initialSessionID,Astro.clientAddress,!headerCarouselOff)
})

if (!resp.ok) return Astro.redirect(`/sign-in?rd=${encodeURIComponent(Astro.url.pathname)}`)

const json = await resp.json()

const {
    mdwResponse:{
        expiresAt,
        sessionID,
        signedIn,
        cartProductDetailsMap,
        cartItemMap,
        cartContent,
        paymentInProcess,
        selCollectionPoint,
        prfCollectionPoint,
        shopAddressMap,
        minSpendForFreeShipping,
        firstName,
        headerCarouselTexts,
    },
    apiResponse:{
        addresses
    }
} = json as {
    mdwResponse:IMdwResponse;
    apiResponse:IApiResponse;
}

Astro.cookies.set('sessionID',sessionID,sessionCookieOption(isOnline,expiresAt))

const shoppingBagProp:IShoppingBagSidebarProp = {
    isSignedIn:signedIn,
    cartContent,
    freeShippingLimit:minSpendForFreeShipping,
    cartItemMap,
    productDetailsMap:cartProductDetailsMap
}

Astro.cookies.set("csrf_token",resp.headers.get("X-CSRF-TOKEN"),sessionCookieOption(isOnline))
---

<Layout {...{
    shoppingBagProp,
    paymentInProcess,
    selCollectionPoint,
    prfCollectionPoint,
    shopAddressMap,
    signedIn,
    firstName,
    title:'Manage My Addresses',
    headerCarouselTexts,
}}>
    <NoAddress hide={!!addresses.length} />
    <AddressList {...{addresses}} />
</Layout>