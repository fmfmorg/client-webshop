---
import EditAddressForm from '@components/account-addresses/edit-address-form.astro';
import Layout from '@components/layout/index.astro'
import { getCookieValueWithKey, httpRequestHeader, sessionCookieOption, type ICountry, type IMdwResponse, type INoServiceCountryMap, type IShoppingBagSidebarProp } from '@misc';
import { FM_CLIENT_WEBSHOP_API_URL, FM_ENV_MODE } from 'astro:env/server'
// import { FM_HEADER_CAROUSEL_OFF_COOKIE_KEY } from 'astro:env/client'
import { headerCarouselOffKey } from '@misc'
import { acceptMembership } from '@misc/env-vars';

interface IApiResponse {
    userAlreadyHasAddress:boolean;
    countries:ICountry[];
    noServiceCountryMap:INoServiceCountryMap;
}

if (!acceptMembership) return new Response(null,{status:404})

const isProduction = FM_ENV_MODE === 'production'
const initialSessionID = Astro.cookies.get("sessionID")?.value || ""
const headerCarouselOff = Astro.cookies.has(headerCarouselOffKey)

const resp = await fetch(`${ FM_CLIENT_WEBSHOP_API_URL }/webshop/account-add-update-address-page-init/0`,{
    headers:httpRequestHeader(true,'SSR',true,false,initialSessionID,Astro.clientAddress,!headerCarouselOff)
})

if (!resp.ok) return Astro.redirect(`/sign-in?rd=${encodeURIComponent(Astro.url.pathname)}`)

const json = await resp.json()
const {
    mdwResponse:{
        expiresAt,
        sessionID,
        signedIn,
        cartProductDetailsMap,
        cartItemMap,
        cartContent,
        paymentInProcess,
        selCollectionPoint,
        prfCollectionPoint,
        shopAddressMap,
        minSpendForFreeShipping,
        firstName,
        headerCarouselTexts,
    },
    apiResponse:{
        userAlreadyHasAddress,
        countries,
        noServiceCountryMap
    }
} = json as {
    mdwResponse:IMdwResponse;
    apiResponse:IApiResponse;
}

Astro.cookies.set('sessionID',sessionID,sessionCookieOption(isProduction,expiresAt))

const shoppingBagProp:IShoppingBagSidebarProp = {
    isSignedIn:signedIn,
    cartContent,
    freeShippingLimit:minSpendForFreeShipping,
    cartItemMap,
    productDetailsMap:cartProductDetailsMap
}

const csrftoken = getCookieValueWithKey(resp.headers.getSetCookie(),"csrf_token")
Astro.cookies.set("csrf_token",csrftoken,sessionCookieOption(isProduction))
---

<Layout {...{
    csrftoken,
    shoppingBagProp,
    paymentInProcess,
    selCollectionPoint,
    prfCollectionPoint,
    shopAddressMap,
    signedIn,
    firstName,
    title:'New Address',
    headerCarouselTexts,
}}>
    <div class="max-w-96 mx-auto mt-4">
        <h1 class="font-display text-2xl [word-spacing:0.3rem]">Add New Address</h1>
        <EditAddressForm {...{countries,noServiceCountryMap,formID:'new-address',userAlreadyHasAddress}} />
    </div>
</Layout>

<script>
import { httpRequestHeader, sessionLost } from "@misc"

    const form = document.getElementById('new-address') as HTMLFormElement
    const errorMsg = document.getElementById('error-msg') as HTMLParagraphElement
    const onSubmit = async (e:SubmitEvent) => {
        e.preventDefault()

        const firstName = (form.elements.namedItem('first-name') as HTMLInputElement).value.trim()
        const lastName = (form.elements.namedItem('last-name') as HTMLInputElement).value.trim()
        const line1 = (form.elements.namedItem('line-one') as HTMLInputElement).value.trim()
        const line2 = (form.elements.namedItem('line-two') as HTMLInputElement).value.trim()
        const city = (form.elements.namedItem('city') as HTMLInputElement).value.trim()
        const stateProvince = (form.elements.namedItem('region') as HTMLInputElement).value.trim()
        const postcode = (form.elements.namedItem('postcode') as HTMLInputElement).value.trim()
        const countryID = (form.elements.namedItem('country') as HTMLSelectElement).value.trim()
        const isDefaultCheckbox = form.elements.namedItem('is-default') as HTMLInputElement
        const isDefault = !!isDefaultCheckbox && isDefaultCheckbox.checked

        const resp = await fetch('/api/webshop/account-add-update-address',{
            method:"POST",
            headers:httpRequestHeader(false,'client',false,true),
            body:JSON.stringify({firstName,lastName,line1,line2,city,stateProvince,postcode,countryID,isDefault})
        })
        
        switch(resp.status){
            case 200:
                window.location.assign('/account/addresses')
                break
            case 401:
                window.location.assign(`/sign-in?rd=${encodeURIComponent(window.location.pathname)}`)
                break
            case 403:
                await sessionLost(resp.status)
                break
            default: 
                errorMsg.classList.remove('invisible')
                break
        }
    }

    form.addEventListener('submit',onSubmit,true)
</script>