---
import ShopContent from '@components/shop'
import Layout from '@components/layout/index.astro'
import { capitalizeEveryWord, collectionPageNoIndex, getCollectionPageTitle, httpRequestHeader, sessionCookieOption, type IMdwResponse, type IShoppingBagSidebarProp } from '@misc';
import { FM_CLIENT_WEBSHOP_API_URL } from 'astro:env/server'
import { FM_IS_ONLINE, PUBLIC_FM_HEADER_CAROUSEL_OFF_COOKIE_KEY } from 'astro:env/client'
import type { ICollectionPageResponse } from '@misc/interfaces';

const { slug } = Astro.params;
const searchParams = Astro.url.search

const isOnline = FM_IS_ONLINE === 'true'
const initialSessionID = Astro.cookies.get("sessionID")?.value || ""
const headerCarouselOff = Astro.cookies.has(PUBLIC_FM_HEADER_CAROUSEL_OFF_COOKIE_KEY)
const resp = await fetch(`${ FM_CLIENT_WEBSHOP_API_URL }/webshop/shop-page-init`,{
    method:'POST',
    headers:httpRequestHeader(true,'SSR',true,initialSessionID,Astro.clientAddress,!headerCarouselOff),
    body:JSON.stringify({
        slug,
        searchParams,
    })
})
if (!resp.ok) return new Response(null,{status:500})

const json = await resp.json()
let {
    mdwResponse:{
        expiresAt,
        sessionID,
        signedIn,
        cartProductDetailsMap,
        cartItemMap,
        cartContent,
        paymentInProcess,
        selCollectionPoint,
        prfCollectionPoint,
        shopAddressMap,
        minSpendForFreeShipping,
        firstName,
        headerCarouselTexts,
        collectionMenuMap,
    },
    apiResponse:{
        productIDs,
        productMap,
        correctSlugArr, 
        facetCountMap,
    }
} = json as {
    mdwResponse:IMdwResponse;
    apiResponse:ICollectionPageResponse;
}

const mainTypeSlug = correctSlugArr[0]
const slugs = correctSlugArr.slice(1)

const availableSlugs = Object.values(collectionMenuMap[mainTypeSlug]).flat()
const hasUnavailableSlugs = slugs.some(e=>!availableSlugs.includes(e))
if (hasUnavailableSlugs){
    const arr = slugs.filter(e=>availableSlugs.includes(e))
    return Astro.redirect(`/collections/${[mainTypeSlug, ...arr].join('/')}${searchParams}`)
}

const correctSlug = correctSlugArr.join('/')
if (slug !== correctSlug) return Astro.redirect(`/collections/${correctSlug}${searchParams}`)

Astro.cookies.set('sessionID',sessionID,sessionCookieOption(isOnline,expiresAt))

productMap = {...productMap,...cartProductDetailsMap}

const shoppingBagProp:IShoppingBagSidebarProp = {
    isSignedIn:signedIn,
    cartContent,
    freeShippingLimit:minSpendForFreeShipping,
    cartItemMap,
    productDetailsMap:productMap
}

Astro.cookies.set("csrf_token",resp.headers.get("X-CSRF-TOKEN"),sessionCookieOption(isOnline))
---
<Layout {...{
    shoppingBagProp,
    paymentInProcess,
    selCollectionPoint,
    prfCollectionPoint,
    shopAddressMap,
    signedIn,
    firstName,
    title:`Affordable ${getCollectionPageTitle(correctSlugArr,collectionMenuMap)} for Her`,
    headerCarouselTexts,
    metaDescription:'Beautiful jewellery from delicate to statement pieces. Mix and match any 3 for £20, plus free UK shipping on orders £20+. Stand out with our unique styles.',
    collectionMenuMap,
    noIndex:collectionPageNoIndex(Astro.url.pathname,mainTypeSlug,collectionMenuMap[mainTypeSlug])
}}>
    <ShopContent 
        productIDs={productIDs || []} 
        productMap={productMap} 
        cartItemMap={cartItemMap} 
        filterAttributes={collectionMenuMap[mainTypeSlug]}
        mainProductType={correctSlugArr[0]}
        pathname={Astro.url.pathname}
        search={Astro.url.search}
        facetCountMap={facetCountMap}
        client:load 
    />
</Layout>