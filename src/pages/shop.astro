---
import ShopContent from '@components/shop/intro.astro'
import Layout from '../components/layout/index.astro'
import type { IProduct } from '@components/catalogue-item/interfaces';
import { getCookieValueWithKey, httpRequestHeader, sessionCookieOption, type IMdwResponse, type IShoppingBagSidebarProp } from '@misc';
import { FM_CLIENT_WEBSHOP_API_URL } from 'astro:env/server'
// import { FM_HEADER_CAROUSEL_OFF_COOKIE_KEY } from 'astro:env/client'
import { headerCarouselOffKey } from '@misc'

interface IApiResponse {
    productIDs:string[];
    productMap:{[k:string]:IProduct};
}

const initialSessionID = Astro.cookies.get("sessionID")?.value || ""
const headerCarouselOff = !!Astro.cookies.get(headerCarouselOffKey)
const resp = await fetch(`${ FM_CLIENT_WEBSHOP_API_URL }/webshop/shop-page-init${Astro.url.search}`,{
    headers:httpRequestHeader(true,'SSR',true,false,initialSessionID,Astro.clientAddress,!headerCarouselOff)
})
if (!resp.ok) {
    console.log(resp.status)
    console.log(await resp.text())
    return Astro.redirect('/maintenance')
}

const json = await resp.json()
let {
    mdwResponse:{
        expiresAt,
        sessionID,
        signedIn,
        cartProductDetailsMap,
        cartItemMap,
        cartContent,
        paymentInProcess,
        selCollectionPoint,
        prfCollectionPoint,
        shopAddressMap,
        minSpendForFreeShipping,
        firstName,
        headerCarouselTexts,
    },
    apiResponse:{
        productIDs,
        productMap,
    }
} = json as {
    mdwResponse:IMdwResponse;
    apiResponse:IApiResponse;
}

Astro.cookies.set('sessionID',sessionID,sessionCookieOption(expiresAt))

productMap = {...productMap,...cartProductDetailsMap}

const shoppingBagProp:IShoppingBagSidebarProp = {
    isSignedIn:signedIn,
    cartContent,
    freeShippingLimit:minSpendForFreeShipping,
    cartItemMap,
    productDetailsMap:productMap
}

const csrftoken = getCookieValueWithKey(resp.headers.getSetCookie(),"csrf_token")
Astro.cookies.set("csrf_token",csrftoken,sessionCookieOption())
---

<Layout {...{
    csrftoken,
    shoppingBagProp,
    paymentInProcess,
    selCollectionPoint,
    prfCollectionPoint,
    shopAddressMap,
    signedIn,
    firstName,
    title:'All Jewellery',
    headerCarouselTexts,
}}>
    <ShopContent productIDs={productIDs || []} productObj={productMap} cartItemObj={cartItemMap} />
</Layout>