---
import Product from '@components/product-page/index.astro';
import Layout from '@components/layout/index.astro'
import type { IProduct } from '@components/catalogue-item/interfaces';
import { httpRequestHeader, sessionCookieOption, type IMdwResponse, type IShoppingBagSidebarProp } from '@misc';
import CollectionPointsSidebar from '@components/product-page/collection-points-sidebar';
import { FM_CLIENT_WEBSHOP_API_URL, FM_ENV_MODE } from 'astro:env/server'
import { headerCarouselOffKey } from '@misc'

interface IApiResponse {
    relatedProductIDs:string[];
    productMap:{[k:string]:IProduct};
}

let { name, id } = Astro.params;
if (id !== id.toUpperCase()) return Astro.redirect(`/product/${name}/${id.toUpperCase()}`)

const isProduction = FM_ENV_MODE === 'production'
const initialSessionID = Astro.cookies.get("sessionID")?.value || ""
const headerCarouselOff = Astro.cookies.has(headerCarouselOffKey)
const resp = await fetch(`${ FM_CLIENT_WEBSHOP_API_URL }/webshop/product-page-init/${id}`,{
    headers:httpRequestHeader(true,'SSR',true,false,initialSessionID,Astro.clientAddress,!headerCarouselOff)
})
if (!resp.ok) return new Response(null,{status:404})
const json = await resp.json()
let {
    mdwResponse:{
        expiresAt,
        sessionID,
        signedIn,
        cartProductDetailsMap,
        cartItemMap,
        cartContent,
        paymentInProcess,
        selCollectionPoint,
        prfCollectionPoint,
        shopAddressMap,
        minSpendForFreeShipping,
        firstName,
        headerCarouselTexts,
    },
    apiResponse:{
        relatedProductIDs,
        productMap,
    }
} = json as {
    mdwResponse:IMdwResponse;
    apiResponse:IApiResponse;
}

let finalName = productMap[id].url
if (finalName !== name) return Astro.redirect(`/product/${finalName}/${id}`)

Astro.cookies.set('sessionID',sessionID,sessionCookieOption(isProduction,expiresAt))

productMap = {...productMap,...cartProductDetailsMap}

const shoppingBagProp:IShoppingBagSidebarProp = {
    isSignedIn:signedIn,
    cartContent,
    freeShippingLimit:minSpendForFreeShipping,
    cartItemMap,
    productDetailsMap:productMap
}

const csrftoken = crypto.randomUUID()
Astro.cookies.set("csrf_token",csrftoken,sessionCookieOption(isProduction))
const productName = productMap[id].name
---

<Layout {...{
    csrftoken,
    shoppingBagProp,
    paymentInProcess,
    selCollectionPoint,
    prfCollectionPoint,
    shopAddressMap,
    signedIn,
    firstName,
    title:productName,
    isProductPage:true,
    headerCarouselTexts,
    titleAddForHer:true
}}>
    <Product 
        id={id} 
        productObj={productMap} 
        cartItemObj={cartItemMap} 
        relatedProductIDs={relatedProductIDs} 
    />
    <CollectionPointsSidebar slot="body-end" client:only="solid-js" {...{shopAddressMap,product:productMap[id]}} />
</Layout>