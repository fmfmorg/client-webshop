---
import Product from '@components/product-page/index.astro';
import { productSchema } from '@components/product-page/schema'
import Layout from '@components/layout/index.astro'
import type { IProduct } from '@components/catalogue-item/interfaces';
import { httpRequestHeader, sessionCookieOption, type IMdwResponse, type IShoppingBagSidebarProp } from '@misc';
import CollectionPointsSidebar from '@components/product-page/collection-points-sidebar';
import { FM_CLIENT_WEBSHOP_API_URL } from 'astro:env/server'
import { FM_IS_ONLINE, PUBLIC_FM_PUBLIC_IMAGE_URL_PREFIX, PUBLIC_FM_HEADER_CAROUSEL_OFF_COOKIE_KEY, PUBLIC_FM_COMPANY_NAME_SHORT } from 'astro:env/client'

interface IApiResponse {
    relatedProductIDs:string[];
    productMap:{[k:string]:IProduct};
}

let { name, id } = Astro.params;
if (id !== id.toUpperCase()) return Astro.redirect(`/product/${name}/${id.toUpperCase()}`)

const isOnline = FM_IS_ONLINE === 'true'
const initialSessionID = Astro.cookies.get("sessionID")?.value || ""
const headerCarouselOff = Astro.cookies.has(PUBLIC_FM_HEADER_CAROUSEL_OFF_COOKIE_KEY)
const resp = await fetch(`${ FM_CLIENT_WEBSHOP_API_URL }/webshop/product-page-init/${id}`,{
    headers:httpRequestHeader(true,'SSR',true,initialSessionID,Astro.clientAddress,!headerCarouselOff)
})
if (!resp.ok) return Astro.redirect('/shop')
const json = await resp.json()
let {
    mdwResponse:{
        expiresAt,
        sessionID,
        signedIn,
        cartProductDetailsMap,
        cartItemMap,
        cartContent,
        paymentInProcess,
        selCollectionPoint,
        prfCollectionPoint,
        shopAddressMap,
        minSpendForFreeShipping,
        firstName,
        headerCarouselTexts,
    },
    apiResponse:{
        relatedProductIDs,
        productMap,
    }
} = json as {
    mdwResponse:IMdwResponse;
    apiResponse:IApiResponse;
}

let finalName = productMap[id].url
if (finalName !== name) return Astro.redirect(`/product/${finalName}/${id}`)

Astro.cookies.set('sessionID',sessionID,sessionCookieOption(isOnline,expiresAt))

productMap = {...cartProductDetailsMap,...productMap}

const shoppingBagProp:IShoppingBagSidebarProp = {
    isSignedIn:signedIn,
    cartContent,
    freeShippingLimit:minSpendForFreeShipping,
    cartItemMap,
    productDetailsMap:productMap
}

Astro.cookies.set("csrf_token",resp.headers.get("X-CSRF-TOKEN"),sessionCookieOption(isOnline))
const productName = productMap[id].name

let preloadImageFilename = ''
if (!!productMap[id].images && !!productMap[id].images.length) {
    preloadImageFilename = productMap[id].images[0].name + '_768x768'
}
---

<Layout {...{
    shoppingBagProp,
    paymentInProcess,
    selCollectionPoint,
    prfCollectionPoint,
    shopAddressMap,
    signedIn,
    firstName,
    title:productName,
    isProductPage:true,
    headerCarouselTexts,
    metaDescription:!!productMap[id].metaDescription ? productMap[id].metaDescription : productMap[id].description,
    imageURL:PUBLIC_FM_PUBLIC_IMAGE_URL_PREFIX+productMap[id].images[0].name+productMap[id].images[0].ext,
    price:productMap[id].discountedPrice,
    inStock:(!!productMap[id].stockQuantities && !!productMap[id].stockQuantities.length) ? !!productMap[id].stockQuantities.map(e=>e.quantity).reduce((a,b)=>a+b,0) : false,
    preloadImageFilename,
    schema:productSchema(productMap[id],Astro.url)
}}>
    <Product 
        id={id} 
        productObj={productMap} 
        cartItemObj={cartItemMap} 
        relatedProductIDs={relatedProductIDs} 
    />
    <CollectionPointsSidebar slot="body-end" client:only="solid-js" {...{shopAddressMap,product:productMap[id]}} />
</Layout>