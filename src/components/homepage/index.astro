---
import ShopNowButton from "./shop-now-button.astro";
import CatalogueItem from '@components/catalogue-item/index.astro'
import type { ICartItemMap } from '@components/cart/interfaces';
import type { ICatalogueMap } from '@misc';

interface Props {
    productIDs?:string[];
    productObj?:ICatalogueMap;
    cartItemObj?:ICartItemMap;
}

const { productIDs = [], productObj, cartItemObj } = Astro.props as Props
---
<a href="/shop">
    <div 
        id="banner-container" 
        class="w-full"
        style={`
            height:2188px;
            background-size:cover;
            background-position-y: center;
        `.replaceAll('        ', '').replaceAll('\n',' ').trim()}
    >
        <div 
            id="banner-text-wide" class="ml-auto hidden flex-col justify-center h-full [&>p>span]:align-middle"
            style="background: linear-gradient(90deg, rgba(249,236,245,0) 0%, rgba(249,236,245,0.8) 20%, rgba(249,236,245,1) 100%);"
        >
            <p class="text-center font-serif">
                <span class="font-light mr-3">Buy</span>
                <span class="font-black mr-3">3</span>
                <span class="font-light mr-3">For</span>
                <span class="font-black">£20</span>
            </p>
            <ShopNowButton />
        </div>
        <div 
            id="banner-text-mid" 
            class="ml-auto hidden flex-col justify-center h-full [&>p>span]:align-middle"
            style="background: linear-gradient(90deg, rgba(249,236,245,0) 0%, rgba(249,236,245,0.8) 20%, rgba(249,236,245,1) 100%);"
        >
            <p class="text-center font-serif">
                <span class="font-light">Buy</span>
                <span class="font-black">3</span>
            </p>
            <p class="text-center font-serif"><span class="font-light">For</span></p>
            <p class="text-center font-serif"><span class="font-black">£20</span></p>
            <ShopNowButton />
        </div>
        <div
            id="banner-text-narrow" 
            class="hidden flex-col justify-center h-full p-4"
        >
            <div class="[&>p>span]:align-middle w-fit mx-auto p-8" style="background-color: rgba(249,236,245,0.7);">
                <p class="text-center font-serif">
                    <span class="font-light">Buy</span>
                    <span class="font-black">3</span>
                </p>
                <p class="text-center font-serif"><span class="font-light">For</span></p>
                <p class="text-center font-serif"><span class="font-black">£20</span></p>
                <ShopNowButton />
            </div>
        </div>
    </div>
</a>
<div 
    class={`
        py-3
        sm:py-4
        md:py-6
        font-serif
        uppercase
        text-sm
        xs:text-base
        sm:text-lg
        md:text-xl
        lg:text-2xl
        tracking-widest
        flex
        items-center
        before:flex-1
        before:pt-px
        before:bg-gray-300
        before:mr-3
        after:flex-1
        after:pt-px
        after:bg-gray-300
        after:ml-3
    `.replaceAll('        ',' ').replaceAll('\n','').trim()}
>Our Bestsellers</div>
<div class="px-2 pb-6 grid grid-cols-2 gap-x-1 2xs:gap-x-2 xs:grid-cols-3 md:gap-x-4 lg:grid-cols-4 gap-y-8">
    {productIDs.map((id)=>(
        <CatalogueItem 
            id={id} 
            productDetails={productObj[id]} 
            productCartDetails={cartItemObj[id]} 
            group={0} 
            observe={false}
            homepageBestseller
        />
    ))}
</div>

<script>
    // image itself is 3361 x 2188
    // image w bg is 6500 x 2188

    import { catalogueItemsOnResize } from '@misc';
    import { PUBLIC_FM_PUBLIC_IMAGE_URL_PREFIX } from 'astro:env/client'

    interface IImageSize {
        w:number;
        h:number;
    }

    const imageSizes:IImageSize[] = [
        {w:2000,h:673},
        {w:3000,h:1010},
        {w:6500,h:2188}
    ]

    let resizeTimeout
    let largestW = 0, largestH = 0
    const bannerContainer = document.getElementById('banner-container') as HTMLDivElement
    const bannerTextWideScreen = document.getElementById("banner-text-wide") as HTMLDivElement
    const bannerTextMidScreen = document.getElementById("banner-text-mid") as HTMLDivElement
    const bannerTextNarrowScreen = document.getElementById("banner-text-narrow") as HTMLDivElement
    const header = document.getElementsByTagName('header')[0] as HTMLDivElement

    const showElement = (elem:HTMLElement) => {
        elem.classList.remove('hidden')
        elem.classList.add('flex')
    }

    const hideElement = (elem:HTMLElement) => {
        elem.classList.add('hidden')
        elem.classList.remove('flex')
    }

    const resizeBanner = () => {
        catalogueItemsOnResize()

        const { innerHeight, innerWidth } = window
        const headerHeight = header.getBoundingClientRect().height
        const bannerMaxHeight = 
            innerHeight 
            - headerHeight 
            - (innerWidth > 768 ? (innerHeight > 500 ? 200 : 30) : (innerHeight > 500 ? 150 : 30))
        const bannerActualHeight = Math.min(2188,bannerMaxHeight)

        const realH = bannerActualHeight * window.devicePixelRatio
        const realW = innerWidth * window.devicePixelRatio

        if (realH > largestH || realW > largestW){
            if (realH > largestH) largestH = realH
            else largestW = realW

            let index = imageSizes.length - 1

            for (let i=0; i<imageSizes.length; i++){
                let imageSize = imageSizes[i]
                if (imageSize.w > realW && imageSize.h > realH){
                    index = i
                    break
                }
            }
            const imageFilename = `${PUBLIC_FM_PUBLIC_IMAGE_URL_PREFIX}banner-${imageSizes[index].w}x${imageSizes[index].h}`
            bannerContainer.style.backgroundImage = `image-set(${['avif','webp','jpg'].map(e=>`url(${imageFilename}.${e}) type('image/${e === 'jpg' ? 'jpeg' : e}')`)})`
        }

        bannerContainer.style.maxHeight = `${bannerMaxHeight}px`
        let imageWidth = bannerActualHeight / 2188 * 3361
        const actualImageWidth = imageWidth
        if (bannerActualHeight / innerWidth < 2188 / 6500) {
            imageWidth = 3361 / 6500 * innerWidth
        }
        let widthForBannerText = innerWidth - imageWidth
        
        const wRate = widthForBannerText / bannerActualHeight
        if (wRate > 1.1) {
            bannerContainer.style.backgroundPositionX = null
            showElement(bannerTextWideScreen)
            hideElement(bannerTextMidScreen)
            hideElement(bannerTextNarrowScreen)
            const fontRate = Math.min(widthForBannerText * 0.0023,bannerActualHeight * 0.0055)
            bannerTextWideScreen.style.width = `${widthForBannerText}px`
            const fontPoints = [1,6,1,6]
            const spans = bannerTextWideScreen.getElementsByTagName('span')
            for (let i=0; i<spans.length; i++){
                spans.item(i).style.fontSize = `${fontPoints[i] * fontRate}rem`
            }

            const shopNowBtn = bannerTextWideScreen.getElementsByClassName('shop-now-btn')[0] as HTMLDivElement
            if (!shopNowBtn) return

            shopNowBtn.classList.remove('hidden')
            if (shopNowBtn.getBoundingClientRect().bottom > bannerTextWideScreen.getBoundingClientRect().bottom) shopNowBtn.classList.add('hidden')
        } else if (actualImageWidth < innerWidth) {
            bannerContainer.style.backgroundPositionX = null
            hideElement(bannerTextWideScreen)
            showElement(bannerTextMidScreen)
            hideElement(bannerTextNarrowScreen)
            widthForBannerText = Math.max(widthForBannerText, bannerActualHeight * 0.7)
            bannerTextMidScreen.style.width = `${widthForBannerText}px`
            const fontRate = Math.min(widthForBannerText * 0.7,bannerActualHeight * 0.005)
            const fontPoints = [1,3,1,3]
            const spans = bannerTextMidScreen.getElementsByTagName('span')
            for (let i=0; i<spans.length; i++){
                spans.item(i).style.fontSize = `${fontPoints[i] * fontRate}rem`
            }
            const lineHeightPoints = [3,1,3]
            const ps = bannerTextMidScreen.getElementsByTagName('p')
            for (let i=0; i<lineHeightPoints.length; i++){
                ps.item(i).style.lineHeight = `${lineHeightPoints[i] * fontRate}rem`
            }

            const shopNowBtn = bannerTextMidScreen.getElementsByClassName('shop-now-btn')[0] as HTMLDivElement
            if (!shopNowBtn) return

            shopNowBtn.classList.add('pt-8')
            shopNowBtn.classList.remove('hidden')
            if (shopNowBtn.getBoundingClientRect().bottom > bannerTextMidScreen.getBoundingClientRect().bottom) shopNowBtn.classList.add('hidden')
        } else {
            hideElement(bannerTextWideScreen)
            hideElement(bannerTextMidScreen)
            showElement(bannerTextNarrowScreen)

            const fontRate = Math.min(innerWidth * 0.005,bannerActualHeight * 0.004)
            bannerTextNarrowScreen.style.width = `${widthForBannerText}px`
            const fontPoints = [1,4,1,4]
            const spans = bannerTextNarrowScreen.getElementsByTagName('span')
            for (let i=0; i<spans.length; i++){
                spans.item(i).style.fontSize = `${fontPoints[i] * fontRate}rem`
            }
            const lineHeightPoints = [4,1.2,4]
            const ps = bannerTextNarrowScreen.getElementsByTagName('p')
            for (let i=0; i<lineHeightPoints.length; i++){
                ps.item(i).style.lineHeight = `${lineHeightPoints[i] * fontRate}rem`
            }

            bannerContainer.style.backgroundPositionX = `${(actualImageWidth - innerWidth) * -0.5}px`

            const shopNowBtn = bannerTextNarrowScreen.getElementsByClassName('shop-now-btn')[0] as HTMLDivElement
            if (!shopNowBtn) return

            shopNowBtn.classList.add('pt-8')
            shopNowBtn.classList.remove('hidden')
            if (shopNowBtn.getBoundingClientRect().bottom > bannerTextNarrowScreen.getBoundingClientRect().bottom) shopNowBtn.classList.add('hidden')
        }
    }
    const onResize = () => {
        clearTimeout(resizeTimeout)
        resizeTimeout = setTimeout(resizeBanner,200)
    }
    window.addEventListener('load',resizeBanner,{once:true})
    window.addEventListener('resize',onResize,true)
</script>