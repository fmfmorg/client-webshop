---
import ShoppingBagIcon from './icons/shopping-bag.astro'
import UserIcon from './icons/user.astro'
import UserSidebar from './user-sidebar.astro'
import HamburgerIcon from './icons/hamburger.astro'
import MenuSidebar from './menu-sidebar/index.astro'
import pages from './pages.json'
import ShoppingBagSidebar from './shopping-bag-sidebar.astro'
import type { IShoppingBagSidebarProp } from '@misc'
import Logo from '@components/logo.astro'
import TextCarousel from './text-carousel'
import { PUBLIC_FM_COMPANY_NAME_SHORT, PUBLIC_FM_ACCEPT_MEMBERSHIP } from 'astro:env/client'
import DesktopMenuItem from './desktop-menu-item.astro'
import CollectionMenu from './collection-menu/index.astro'

interface Props {
  signedIn:boolean;
  firstName:string;
  showUserIcon?:boolean;
  shoppingBagProp?:IShoppingBagSidebarProp;
  headerCarouselTexts:string[];
  collectionMenuMap?:{[c:string]:{[d:string]:string[]}};
}

const acceptMembership = PUBLIC_FM_ACCEPT_MEMBERSHIP === 'true'
const { showUserIcon, shoppingBagProp, signedIn, firstName, headerCarouselTexts, collectionMenuMap } = Astro.props
const isCheckoutPage = Astro.url.pathname === '/checkout'
---


<header class={`bg-white shadow md:shadow-none z-30 top-0 left-0 w-full fixed transition-transform duration-300 ${isCheckoutPage ? 'shadow' : ''}`.trim()}>
    {!!headerCarouselTexts.length && <TextCarousel texts={headerCarouselTexts} client:load />}
    <div id="top-nav-container" class={isCheckoutPage ? 'flex justify-center' : 'px-4 flex justify-between items-center'}>
        <div class={isCheckoutPage ? 'hidden' : 'flex md:hidden'}>
            <label for="menu-sidebar-checkbox" id="menu-icon-button" class="cursor-pointer focus:outline-none h-full px-1 py-2 -ml-3 md:px-2 md:py-4 md:-ml-2">
                <HamburgerIcon />
            </label>
            <!-- <button class="focus:outline-none h-full px-1 py-2 md:px-2 md:py-4 invisible">
                <HamburgerIcon />
            </button> -->
        </div>
        <a id="nav-logo" href="/" aria-label=`Homepage | ${PUBLIC_FM_COMPANY_NAME_SHORT}` class=`py-2 xs:py-3 w-[140px] md:w-[162px] ${isCheckoutPage ? 'flex flex-col justify-center h-10 md:h-12' : ''}`>
            <Logo className='h-[16.62px] md:h-[19.22px]' />
        </a>
        <nav class={isCheckoutPage ? 'hidden' : 'hidden md:block'}>
            <ul id="desktop-nav-link-container" class="flex space-x-8 font-display text-lg uppercase">
                {pages.map(({name,path})=>(
                    <li {...name === 'shop' ? {id:'desktop-shop-li'} : {class:'flex flex-col justify-center'}}>
                        {name==='shop' ? 
                        <div class="mouse:py-5">
                            <DesktopMenuItem {...{name,path}} />
                        </div>
                        :
                        <DesktopMenuItem {...{name,path}} />}
                    </li>
                ))}
            </ul>
        </nav>
        <div class={isCheckoutPage ? 'hidden' : 'flex'}>
            {acceptMembership && !!showUserIcon && <label for="user-sidebar-checkbox" id="user-sidebar-icon-button" class={`focus:outline-none h-full py-2 md:py-4 ${!!shoppingBagProp ? 'px-1 md:px-2' : 'px-1 md:px-2 -mr-3 md:-mr-2'}`}>
                <UserIcon className="h-6 w-6 xs:h-8 xs:w-8 stroke-[0.2rem] xs:stroke-[0.15rem] stroke-black fill-none" />
            </label>}
            {!!shoppingBagProp && <label for="shopping-bag-sidebar-checkbox" id="shopping-bag-sidebar-icon-button" class="focus:outline-none h-full px-1 md:px-2 py-2 md:py-4 -mr-3 md:-mr-2">
                <ShoppingBagIcon className="h-6 w-6 xs:h-8 xs:w-8 stroke-[0.2rem] xs:stroke-[0.15rem] stroke-black fill-none" />
            </label>}
        </div>
    </div>
</header>

{acceptMembership && !!showUserIcon && <UserSidebar {...{showUserIcon,firstName,signedIn}} />}
{!!shoppingBagProp && <ShoppingBagSidebar props={shoppingBagProp} />}
<div id="menu-overlay" class="fixed w-screen h-screen top-0 left-0 hidden z-[35] before:absolute before:w-full before:h-full before:backdrop-blur-sm"></div>
{!isCheckoutPage && <>
<MenuSidebar {...{collectionMenuMap}} />
{!!collectionMenuMap && <CollectionMenu {...{collectionMenuMap}} />}
</>}

<script>
import { headerScrollLimit } from "@stores";

    const header = document.querySelector('header');
    const shoppingBagCheckbox = document.getElementById('shopping-bag-sidebar-checkbox') as HTMLInputElement;
    const userCheckbox = document.getElementById('user-sidebar-checkbox') as HTMLInputElement;
    const menuCheckbox = document.getElementById("menu-sidebar-checkbox") as HTMLInputElement
    const desktopShopLI = document.getElementById('desktop-shop-li') as HTMLLIElement
    const desktopMenuCheckbox = document.getElementById("collection-dropdown-checkbox") as HTMLInputElement
    const desktopMenuDropdown = document.getElementById('collection-dropdown') as HTMLDivElement
    const _headerScrollLimit = headerScrollLimit.get()
    const logo = document.getElementById('nav-logo') as HTMLAnchorElement
    const topNavContainer = document.getElementById('top-nav-container') as HTMLDivElement

    let lastScrollY = window.scrollY;

    const onScroll = () => {
        const headerHeight = header.getBoundingClientRect().height
        if (Math.abs(window.scrollY - lastScrollY) > _headerScrollLimit) {
            const collectionPointSidebarCheckbox = document.getElementById('product-collection-points-sidebar-checkbox') as HTMLInputElement
            if (window.scrollY < lastScrollY) {
                // Scrolling down
                header.classList.remove('-translate-y-full'); // Show the navbar
                desktopMenuDropdown.classList.remove('-translate-y-full')
            } else if (
                (!!shoppingBagCheckbox ? !shoppingBagCheckbox.checked : true) && 
                (!!userCheckbox ? !userCheckbox.checked : true) && 
                (!!menuCheckbox ? !menuCheckbox.checked : true) && 
                (!!collectionPointSidebarCheckbox ? !collectionPointSidebarCheckbox.checked : true)
            ){
                // Scrolling up
                header.classList.add('-translate-y-full'); // Hide the navbar
                if (!!desktopMenuCheckbox && desktopMenuCheckbox.checked) desktopMenuCheckbox.click()
                desktopMenuDropdown.classList.add('-translate-y-full')
            }
        } else if (window.scrollY <= headerHeight) header.classList.remove('-translate-y-full');
        lastScrollY = window.scrollY; // Update last scroll position
    }

    window.addEventListener('scroll', onScroll, true);

    if (!!desktopShopLI) {
        const collectionMenuDropdownCheckbox = document.getElementById('collection-dropdown-checkbox') as HTMLInputElement
        const onMouseEnter = () => {
            if (!collectionMenuDropdownCheckbox.checked) collectionMenuDropdownCheckbox.click()
        }
        const onMouseLeave = (e:MouseEvent) => {
            const targetElem = e.relatedTarget as HTMLElement
            const isCollectionDropdown = targetElem.closest('#collection-dropdown')
            const isTopNavContainer = targetElem.closest('#top-nav-container')
            const isDesktopNavLinksContainer = targetElem.closest('#desktop-nav-link-container')
            const closeDropdown = !isCollectionDropdown && !isTopNavContainer || !!isDesktopNavLinksContainer

            if (closeDropdown && collectionMenuDropdownCheckbox.checked) collectionMenuDropdownCheckbox.click()
        }
        const closeDropDown = () => {
            if (collectionMenuDropdownCheckbox.checked) collectionMenuDropdownCheckbox.click()
        }

        const topNavOnMouseLeave = (e:MouseEvent) => {
            const targetElem = e.relatedTarget as HTMLElement
            const isCollectionDropdown = targetElem.closest('#collection-dropdown')

            if (!isCollectionDropdown && collectionMenuDropdownCheckbox.checked) collectionMenuDropdownCheckbox.click()
        }

        logo.addEventListener('mouseenter',closeDropDown)
        topNavContainer.addEventListener('mouseleave',topNavOnMouseLeave)
        desktopShopLI.addEventListener('mouseenter',onMouseEnter,true)
        desktopShopLI.addEventListener('mouseleave',onMouseLeave)
    }
</script>