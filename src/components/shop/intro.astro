---
import CatalogueItem from '@components/catalogue-item/index.astro'
import type { ICartItemMap } from '@components/cart/interfaces';
import type { ICatalogueMap } from '@misc';

interface Props {
    productIDs?:string[];
    productObj?:ICatalogueMap;
    cartItemObj?:ICartItemMap;
}

const { productIDs = [], productObj, cartItemObj } = Astro.props as Props

console.log(productIDs)

const itemPerGroup = 24
---

<div 
    id="shop-container" 
    class="px-3 md:px-4 grid grid-cols-2 gap-x-1 2xs:gap-x-2 xs:grid-cols-3 md:gap-x-4 lg:grid-cols-4 2xl:grid-cols-6 gap-y-8"
    data-product-ids={JSON.stringify(productIDs)}
>
    {productIDs.map((id,i)=>(
        <CatalogueItem 
            id={id} 
            productDetails={productObj[id]} 
            productCartDetails={cartItemObj[id]} 
            group={Math.floor(i/itemPerGroup)} 
            observe={i % itemPerGroup === itemPerGroup - 1}
        />
    ))}
</div>

<script>
import type { IProduct } from "@components/catalogue-item/interfaces"
import { catalogueItemsOnResize, dispatchInternalEvent, httpRequestHeader } from "@misc"
import { PRODUCT_UPDATE } from "@misc/event-keys"

    const container = document.getElementById('shop-container') as HTMLDivElement
    const productIDs = JSON.parse(container.dataset.productIds) as string[]
    const productIdLen = productIDs.length
    const productPerChunk = 24
    const chunkLen = Math.ceil(productIdLen / productPerChunk)
    const chunks = Array(chunkLen).fill(undefined).map((_,i)=>productIDs.slice(i * productPerChunk, i * productPerChunk + productPerChunk))
    
    
    const onOnline = async () => {
        try {
            const responses = await Promise.all(chunks.map(chunk => fetch('/api/webshop/shop-page',{
                method:"POST",
                headers:httpRequestHeader(false,'client',false,true),
                body:JSON.stringify({ids:chunk})
            })))
            const jsons = await Promise.all(responses.map(resp => resp.json())) as {apiResponse:{productDetails:IProduct[]}}[]
            const productDetails = jsons.map(e=>e.apiResponse.productDetails).flat()
            dispatchInternalEvent(PRODUCT_UPDATE,productDetails)
        } catch (e) {}
    }

    let resizeTimeout
    const onResize = () => {
        clearTimeout(resizeTimeout)
        resizeTimeout = setTimeout(catalogueItemsOnResize,200)
    }

    window.addEventListener('online',onOnline,true)
    window.addEventListener('resize',onResize,true)
    window.addEventListener('load',catalogueItemsOnResize,{once:true})
</script>