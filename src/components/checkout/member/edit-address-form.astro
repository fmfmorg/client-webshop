---
import CountrySelect from "@components/account-addresses/country-select";
import Checkbox from "@components/input-fields/checkbox";
import TextInput from "@components/input-fields/text-input";
import CloseSidebarIcon from "@components/layout/header/icons/close-sidebar-icon.astro";
import type { ICountry, INoServiceCountryMap } from "@misc";

interface Props {
    countries:ICountry[];
    noServiceCountryMap:INoServiceCountryMap;
}

const { countries, noServiceCountryMap } = Astro.props as Props
const idPrefix = 'edit-address'
---
<astro-checkout-edit-address-form>
    <input type="checkbox" hidden id='checkout-edit-address' class="peer" />
    <div class="fixed w-screen h-screen bg-gray-600 left-0 top-0 z-50 opacity-50 hidden peer-checked:block" />
    <div class="fixed w-screen h-screen top-0 left-0 hidden flex-col justify-center z-50 peer-checked:flex">
        <div class="edit-address-form-container bg-white max-w-96 mx-auto rounded-md">
            <div class="edit-address-form-header flex justify-between">
                <div class="ml-2 flex flex-col justify-center">
                    <p class="uppercase text-sm tracking-widest">Update Address</p>
                </div>
                <label for='checkout-edit-address' class="cursor-pointer">
                    <CloseSidebarIcon />
                </label>
            </div>
            <form id='edit-address-form'>
                <div class="edit-address-form-main hide-scrollbar p-2 overflow-y-scroll">
                    <TextInput 
                        client:only="solid-js"
                        type="text"
                        id="first-name"
                        name="first-name"
                        required
                        placeholder='First Name'
                        className='mb-8 mt-4'
                        idPrefix={idPrefix}
                        maxLength={50}
                    />
                    <TextInput 
                        client:only="solid-js"
                        type="text"
                        id="last-name"
                        name="last-name"
                        required
                        placeholder='Last Name'
                        className='my-8'
                        idPrefix={idPrefix}
                        maxLength={50}
                    />
                    <TextInput 
                        client:only="solid-js"
                        type="text"
                        id="line-one"
                        name="line-one"
                        required
                        placeholder='Address Line 1'
                        className='my-8'
                        idPrefix={idPrefix}
                        maxLength={100}
                    />
                    <TextInput 
                        client:only="solid-js"
                        type="text"
                        id="line-two"
                        name="line-two"
                        placeholder='Address Line 2'
                        className='my-8'
                        idPrefix={idPrefix}
                        maxLength={100}
                    />
                    <TextInput 
                        type='text' 
                        id='city' 
                        name='city' 
                        placeholder="City" 
                        required
                        className='mb-8'
                        client:only="solid-js"
                        idPrefix={idPrefix}
                        maxLength={50}
                    />
                    <TextInput 
                        type='text' 
                        id='region' 
                        name='region' 
                        placeholder="Region" 
                        required={false}
                        className='mb-8'
                        client:only="solid-js"
                        idPrefix={idPrefix}
                        maxLength={50}
                    />
                    <TextInput 
                        type='text' 
                        id='postcode' 
                        name='postcode' 
                        placeholder="Postcode / ZIP Code" 
                        required
                        className='mb-10'
                        client:only="solid-js"
                        idPrefix={idPrefix}
                        maxLength={20}
                    />
                    <CountrySelect {...{countries,noServiceCountryMap,idPrefix}} client:only="solid-js" />
                    <div class="is-default-checkbox-container">
                        <Checkbox idPrefix={idPrefix} id='is-default' name='is-default' client:only="solid-js">
                            <p class='font-light text-xs tracking-wider pl-6 mt-4'>Set this as default address.</p>
                        </Checkbox>
                    </div>
                </div>
                <div class="edit-address-form-footer pb-2">
                    <p class="error-msg pt-2 font-light text-sm text-red-700 tracking-wider text-center invisible">Server error. Please try again later.</p>
                    <div class="flex justify-center mt-2">
                        <input type="submit" value="Submit" class="w-full max-w-24 uppercase font-serif tracking-widest [word-spacing:0.2em] cursor-pointer text-white bg-gray-600 border border-gray-600 mouse:hover:bg-black mouse:hover:border-black duration-300 font-semibold text-sm p-2" />
                    </div>
                </div>
            </form>
        </div>
    </div>
</astro-checkout-edit-address-form>

<script>
import { dispatchInternalEvent, httpRequestHeader, sessionLost, type IMemberEditAddressUpdateResponse, type IUserAddress } from "@misc";
import { MEMBER_EDIT_ADDRESS_UPDATE, OPEN_EDIT_ADDRESS_MODAL, TEXT_INPUT_SET_NEW_VALUE } from "@misc/event-keys";

class CheckoutEditAddressForm extends HTMLElement {
    constructor(){
        super()

        let resizeTimeout

        const isDesktop = window.matchMedia && matchMedia("(pointer:fine)").matches;
        const editAddressFormCheckbox = document.getElementById('checkout-edit-address') as HTMLInputElement
        const container = this.getElementsByClassName("edit-address-form-container")[0] as HTMLDivElement
        const header = this.getElementsByClassName("edit-address-form-header")[0] as HTMLDivElement
        const main = this.getElementsByClassName("edit-address-form-main")[0] as HTMLDivElement
        const footer = this.getElementsByClassName("edit-address-form-footer")[0] as HTMLDivElement
        const form = document.getElementById('edit-address-form') as HTMLFormElement
        const errorMsg = form.getElementsByClassName('error-msg')[0] as HTMLParagraphElement
        const isDefaultCheckboxContainer = container.getElementsByClassName('is-default-checkbox-container')[0] as HTMLDivElement

        let addressID = ''

        const resize = () => {
            if (!!editAddressFormCheckbox && !editAddressFormCheckbox.checked) return
            main.style.height = null
            
            const { innerHeight, innerWidth } = window
            container.style.maxHeight = `${innerHeight - (isDesktop ? 40 : 20)}px`
            
            const containerHeight = container.getBoundingClientRect().height
            const headerHeight = header.getBoundingClientRect().height
            const footerHeight = footer.getBoundingClientRect().height
            main.style.height = `${containerHeight - headerHeight - footerHeight}px`
            container.style.width = `${innerWidth - (isDesktop ? 40 : 20)}px`
        }

        const onResize = () => {
            clearTimeout(resizeTimeout)
            resizeTimeout = setTimeout(resize,200)
        }

        const inputElem = (name:string) => form.elements.namedItem(name) as HTMLInputElement

        const setInputValue = (elem:HTMLInputElement, value:string) => {
            dispatchInternalEvent(TEXT_INPUT_SET_NEW_VALUE,{id:elem.id,value})
            elem.value = value
        }

        const onSubmit = async (e:SubmitEvent) => {
            e.preventDefault()
            const countryIDElem = form.elements.namedItem('country') as HTMLSelectElement
            const isDefaultCheckbox = form.elements.namedItem('is-default') as HTMLInputElement
            
            const firstName = inputElem('first-name').value
            const lastName = inputElem('last-name').value
            const line1 = inputElem('line-one').value
            const line2 = inputElem('line-two').value
            const city = inputElem('city').value
            const stateProvince = inputElem('region').value
            const postcode = inputElem('postcode').value
            const countryID = countryIDElem.value
            const isDefault = !!isDefaultCheckbox && isDefaultCheckbox.checked

            const resp = await fetch('/api/webshop/account-add-update-address',{
                method:"POST",
                headers:httpRequestHeader(false,'client',false),
                body:JSON.stringify({
                    id:addressID,
                    firstName,
                    lastName,
                    line1,
                    line2,
                    city,
                    stateProvince,
                    postcode,
                    countryID,
                    isDefault,
                })
            })
            
            switch(resp.status){
                case 200:
                    const { apiResponse } = await resp.json() as {apiResponse:IMemberEditAddressUpdateResponse}
                    dispatchInternalEvent(MEMBER_EDIT_ADDRESS_UPDATE,apiResponse)
                    editAddressFormCheckbox.checked = false;
                    window.removeEventListener('resize',onResize,true)
                    break
                case 401:
                    window.location.assign(`/sign-in?rd=${encodeURIComponent(window.location.pathname)}`)
                    break
                case 403:
                    await sessionLost(resp.status)
                    break
                default: 
                    errorMsg.classList.remove('invisible')
                    break
            }
        }

        const openModal = (ev:CustomEvent) => {
            resize()
            const address = ev.detail as IUserAddress
            addressID = address.id
            const countryIDElem = form.elements.namedItem('country') as HTMLSelectElement
            const isDefaultCheckbox = form.elements.namedItem('is-default') as HTMLInputElement
            
            setInputValue(inputElem('first-name'),address.firstName)
            setInputValue(inputElem('last-name'),address.lastName)
            setInputValue(inputElem('line-one'),address.line1)
            setInputValue(inputElem('line-two'),address.line2)
            setInputValue(inputElem('city'),address.city)
            setInputValue(inputElem('region'),address.stateProvince)
            setInputValue(inputElem('postcode'),address.postcode)
            countryIDElem.value = address.countryID
            isDefaultCheckbox.checked = address.isDefault
            isDefaultCheckboxContainer.classList.toggle('hidden',address.isDefault)
            if (!!editAddressFormCheckbox && !editAddressFormCheckbox.checked) editAddressFormCheckbox.click()
        }

        const checkboxOnChange = (e:Event) => {
            const checked = (e.target as HTMLInputElement).checked
            if (checked) {
                resize()
                window.addEventListener('resize',onResize,true)
            } else {
                window.removeEventListener('resize',onResize,true)
            }
        }

        window.addEventListener('load',resize,{once:true})
        
        editAddressFormCheckbox.addEventListener('click',checkboxOnChange,true)
        document.addEventListener(OPEN_EDIT_ADDRESS_MODAL,openModal,true)

        form.addEventListener('submit',onSubmit,true)
    }
}

customElements.define('astro-checkout-edit-address-form',CheckoutEditAddressForm)
</script>