---
import Product from './product.astro'
import type { IProduct } from './interfaces';
import type { ICartItem } from '@components/cart/interfaces';
import ShoppingBag from '@components/layout/header/icons/shopping-bag.astro';
import LoadingSmall from '@components/layout/header/icons/loading-small.astro';

interface Props {
    id:string;
    productPageRelatedProduct?:boolean;
    productDetails:IProduct;
    productCartDetails:ICartItem;
    group:number;
    observe:boolean;
    homepageBestseller?:boolean;
}

const { id, productPageRelatedProduct = false, productDetails, productCartDetails, group, observe, homepageBestseller = false } = Astro.props
const {
    url,
    images,
    stockQuantities,
    name,
    discountedPrice
} = productDetails

const imageLen = images.filter(e=>e.catalogue).length
---

<astro-catalogue-product
    id=`catalogue-${id}`
    data-id={id} 
    data-len={imageLen} 
    data-gp={group}
    data-obs={observe ? '1' : '0'}
    data-qty-in-cart={productCartDetails?.quantity || 0}
    data-stock-quantities={JSON.stringify(stockQuantities)}
    class={`${!!group ? "relative hidden" : "relative"}${productPageRelatedProduct ? ' related-product' : ''}${homepageBestseller ? ' homepage-bestseller' : ''}`.trim()}
    data-name={name}
    data-price={discountedPrice}
>
    <a href=`/product/${url}/${id}`>
        <Product id={id} productDetails={productDetails} renderImages={!group} />
    </a>
    <div class="absolute top-0 right-0 p-1 mouse:hidden">
        <button id=`catalogue-add-to-bag-touchscreen-${id}` class="add-to-bag add-to-bag-touchscreen" type="button" aria-label="Add to Bag">
            <ShoppingBag className="shopping-bag-icon h-5 w-5 xs:h-6 xs:w-6 sm:h-7 sm:w-7 fill-none stroke-[0.2rem]" />
            <LoadingSmall className="h-5 w-5 xs:h-6 xs:w-6 sm:h-7 sm:w-7 stroke-[0.2rem] fill-gray-500 animate-spin hidden" />
        </button>
    </div>
</astro-catalogue-product>

<script>
import { zaraz }  from 'zaraz-ts'
import type { IAddToBagResponse } from "@components/cart/interfaces";
import { dispatchInternalEvent, formatPrice, httpRequestHeader, sessionLost, showErrorModal } from "@misc";
import type { IProduct, IStockQuantity } from "./interfaces";
import { selectedCollectionPoint, otherClientPaymentInProcess, shopNameMap } from "@stores";
import { ADD_TO_BAG_FROM_CATALOGUE, CART_QTY_UPDATE, CART_UPDATE, PRODUCT_UPDATE } from "@misc/event-keys";
import { observer } from "./observer";

    class Product extends HTMLElement {
        constructor(){
            super();

            const observe = !!(+this.dataset.obs)
            if (observe) observer.observe(this)

            const productName = this.dataset.name
            const discountedPrice = +this.dataset.price * 0.01

            const isDesktop = window.matchMedia && matchMedia("(pointer:fine)").matches;
            const id = this.dataset.id
            const container = this.getElementsByClassName('mouse:overflow-hidden')[0]
            const radios = this.querySelectorAll(`input[name="${id}"]`) as NodeListOf<HTMLInputElement>
            const addToBagMouseBtn = this.getElementsByClassName('add-to-bag-mouse')[0]
            const addToBagTouchscreenBtn = this.getElementsByClassName('add-to-bag-touchscreen')[0]

            const shoppingBagIcons = this.getElementsByClassName('shopping-bag-icon')
            const spinIcon = this.getElementsByClassName('animate-spin')

            const stockQuantityMap = new Map((JSON.parse(this.dataset.stockQuantities) as IStockQuantity[]).map(e=>([e.address,e.quantity])))

            const setLoading = (loading:boolean) => {
                for (let i=0; i<shoppingBagIcons.length; i++){
                    shoppingBagIcons.item(i).classList.toggle('hidden',loading)
                }
                for (let i=0; i<spinIcon.length; i++){
                    spinIcon.item(i).classList.toggle('hidden',!loading)
                }
            }

            const getMaxStockQty = () => {
                let result = 0
                stockQuantityMap.forEach(v=>{
                    if (v > result) result = v
                })
                return result
            }
            let maxStockQty = getMaxStockQty()
            let qtyInCart = +this.dataset.qtyInCart

            let index = 0;
            const len = +(this.dataset.len)
            const lenValid = !isNaN(len)

            const leftward = () => {
                index--
                if (index < 0 && lenValid) index = len - 1;
                radios[index].click()
            }

            const rightward = () => {
                index++
                if (lenValid && index === len) index = 0;
                radios[index].click()
            }

            const updateAddToBagBtn = () => {
                const hideAddToBagBtns = otherClientPaymentInProcess.get() || maxStockQty === qtyInCart
                addToBagMouseBtn.classList.toggle('hidden',hideAddToBagBtns)
                addToBagTouchscreenBtn.classList.toggle('hidden',hideAddToBagBtns)
            }

            const addToBag = async () => {
                const currentCollectionPoint = selectedCollectionPoint.get()
                const qtyAvailable = !!currentCollectionPoint ? stockQuantityMap.get(currentCollectionPoint) : maxStockQty

                if (qtyInCart < qtyAvailable){
                    setLoading(true)
                    const resp = await fetch(`/api/webshop/product-add-qty`,{
                        method:"POST",
                        headers:httpRequestHeader(false,'client',true),
                        body:JSON.stringify({id,changeInQuantity:1,dateAdded:Date.now()})
                    })

                    if (!resp.ok) {
                        if (await sessionLost(resp.status)) return
                        setLoading(false)
                        showErrorModal('Failed to update your shopping bag. Please try again later.')
                        return
                    }

                    const json = await resp.json()
                    const { apiResponse } = json as {apiResponse:IAddToBagResponse}
                    const { cartItemMap } = apiResponse

                    dispatchInternalEvent(ADD_TO_BAG_FROM_CATALOGUE,apiResponse)

                    qtyInCart = cartItemMap[id].quantity
                    updateAddToBagBtn()
                    setLoading(false)

                    // zaraz.ecommerce('Product Added',{
                    //     product_id:id,
                    //     name:productName,
                    //     price: discountedPrice,
                    //     currency:'gbp',
                    //     quantity:1,
                    // })

                    zaraz.track('AddToCart',{
                        content_ids: [id],
                        content_type: 'product',
                    })
                } else if (!!currentCollectionPoint) {
                    const collectionPontOnQtyIncreaseCheckbox = document.getElementById("collection-point-on-qty-increase") as HTMLInputElement
                    const collectionPointNameElem = document.getElementById('current-collection-point-name') as HTMLSpanElement
                    if (!collectionPontOnQtyIncreaseCheckbox || !collectionPointNameElem) return
                    collectionPointNameElem.innerText = currentCollectionPoint === 1 ? 'our warehouse' : `${shopNameMap.get()[currentCollectionPoint]} store`
                    collectionPontOnQtyIncreaseCheckbox.dataset.changeInQuantity = '1'
                    collectionPontOnQtyIncreaseCheckbox.dataset.productId = id
                    collectionPontOnQtyIncreaseCheckbox.dataset.dt = `${Date.now()}`
                    collectionPontOnQtyIncreaseCheckbox.checked = true
                }
            }

            const onCartQtyUpdate = (e:CustomEvent) => {
                const { id:_id, qtyInCart:_qtyInCart } = e.detail as {id:string;qtyInCart:number}
                if (_id !== id) return
                qtyInCart = _qtyInCart
                updateAddToBagBtn()
            }

            const onWsCartUpdate = (e:CustomEvent) => {
                const { cartItemMap } = e.detail as IAddToBagResponse
                qtyInCart = !!cartItemMap[id] ? cartItemMap[id].quantity : 0
                updateAddToBagBtn()
            }

            const onProductUpdate = (ev:CustomEvent) => {
                const productDetailsArr = ev.detail as IProduct[]
                const productDetails = productDetailsArr.find(e=>e.id === id)
                if (!productDetails) return

                stockQuantityMap.clear()
                productDetails.stockQuantities.forEach(v=>{
                    stockQuantityMap.set(v.address,v.quantity)
                })
                maxStockQty = getMaxStockQty()
                if (qtyInCart > maxStockQty) qtyInCart = maxStockQty
                updateAddToBagBtn()

                const { price, discountedPrice } = productDetails

                const originalPriceElems = this.getElementsByClassName('original-price')
                for (let i=0; i<originalPriceElems.length; i++){
                    (originalPriceElems.item(i) as HTMLParagraphElement|HTMLSpanElement).innerText = formatPrice(price)
                }
                const discountedPriceElem = this.getElementsByClassName('discounted-price')[0] as HTMLSpanElement
                discountedPriceElem.innerText = formatPrice(discountedPrice)

                const wDiscount = price !== discountedPrice
                const noDiscountElem = this.getElementsByClassName('without-discount')[0] as HTMLParagraphElement
                const wDiscountElem = this.getElementsByClassName('with-discount')[0] as HTMLParagraphElement
                noDiscountElem.classList.toggle('hidden',wDiscount)
                wDiscountElem.classList.toggle('hidden',!wDiscount)
            }

            document.addEventListener(CART_QTY_UPDATE,onCartQtyUpdate,true)
            document.addEventListener(PRODUCT_UPDATE,onProductUpdate,true)
            document.addEventListener(CART_UPDATE,onWsCartUpdate,true)
            window.addEventListener('load',updateAddToBagBtn,{once:true})
            otherClientPaymentInProcess.subscribe(updateAddToBagBtn)

            if (isDesktop){
                const leftwardBtn = this.getElementsByClassName('leftward')[0]
                const rightwardBtn = this.getElementsByClassName('rightward')[0]
                const addToBagBtn = this.getElementsByClassName('add-to-bag-mouse')[0] as HTMLButtonElement
                
                const onMouseLeave = () => {
                    index = 0
                    radios[0].click()
                }
                
                container.addEventListener('mouseleave',onMouseLeave)

                const buttonsOnClick = (e:MouseEvent) => {
                    const targetElem = e.target as HTMLElement
                    const isLeftwardBtn = targetElem.closest('#' + leftwardBtn.id)
                    const isRightwardBtn = targetElem.closest('#' + rightwardBtn.id)
                    const isAddToBagBtn = targetElem.closest('#' + addToBagBtn.id)

                    if (!!isLeftwardBtn || !!isRightwardBtn || !!isAddToBagBtn){
                        e.preventDefault()
                        if (!!isLeftwardBtn) leftward()
                        else if (!!isRightwardBtn) rightward()
                        else addToBag()
                    } 
                }

                document.addEventListener('click',buttonsOnClick,true)
            } else {
                const addToBagBtn = this.getElementsByClassName('add-to-bag-touchscreen')[0] as HTMLButtonElement
                const link = this.getElementsByTagName('a')[0] as HTMLAnchorElement
                const limit = 20
                let touchStartX = 0, touchStartY = 0

                const onTouchStart = (e:TouchEvent) => {
                    const thisTouch = e.changedTouches[0]
                    const targetElem = thisTouch.target as HTMLElement
                    const isContainer = targetElem.closest('#' + container.id)
                    if (!isContainer) return
                    touchStartX = thisTouch.clientX
                    touchStartY = thisTouch.clientY
                }

                const onTouchEnd = (e:TouchEvent) => {
                    const thisTouch = e.changedTouches[0]
                    const targetElem = thisTouch.target as HTMLElement
                    const isContainer = targetElem.closest('#' + container.id)
                    const isAddToBagBtn = targetElem.closest('#' + addToBagBtn.id)
                    if (!!isContainer || !!isAddToBagBtn){
                        if (!!isContainer){
                            const currentX = thisTouch.clientX
                            const currentY = thisTouch.clientY
                            const deltaX = Math.abs(currentX - touchStartX)
                            const deltaY = Math.abs(currentY - touchStartY)
                            
                            if (deltaX < limit && deltaY < limit) {
                                if (!(e.target as HTMLElement).classList.contains('add-to-bag')) link.click()
                            }
                            else if (deltaX > deltaY) {
                                if (currentX > touchStartX) leftward()
                                else rightward()
                            }
                        } else addToBag()
                    }
                }
                
                document.addEventListener('touchstart',onTouchStart,{passive:false});
                document.addEventListener('touchend',onTouchEnd,{passive:false})
            }
        }
    }

    customElements.define('astro-catalogue-product', Product);
</script>