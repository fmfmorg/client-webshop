---
import Carousel from "@components/catalogue-item/carousel.astro"
import type { IProductImages } from "@components/catalogue-item/interfaces";

interface Props {
    id:string;
    images: IProductImages[];
}

const { id, images } = Astro.props as Props
---
<astro-main-carousel data-id={id} data-len={images.length}>
    <div id=`main-carousel-${id}` class="w-full relative width-1/2 pb-[100%] group mb-8 2xs:mb-12">
        <Carousel images={images} id={id} productPageProduct renderImages />
        <div class="touchscreen:hidden">
            <button id="main-carousel-leftward" class="leftward absolute top-0 h-full left-0 w-2/12 peer/left">
                <svg viewBox="0 0 70 100" stroke-width="0.8rem" stroke-linecap="round" stroke-linejoin="round" fill="none" class="absolute h-4 xs:h-6 sm:h-8 left-[15%] stroke-gray-700 duration-500 opacity-30 peer-hover/left:opacity-100 pointer-events-none" style="top:calc(50% - 0.5em)">
                    <polyline points="65,5 20,50 65,95" />
                </svg>
            </button>
            <button id="main-carousel-rightward" class="rightward absolute top-0 h-full right-0 w-2/12 peer/right">
                <svg viewBox="0 0 70 100" stroke-width="0.8rem" stroke-linecap="round" stroke-linejoin="round" fill="none" class="absolute h-4 xs:h-6 sm:h-8 right-[15%] stroke-gray-700 duration-500 opacity-30 peer-hover/right:opacity-100 pointer-events-none" style="top:calc(50% - 0.5em)">
                    <polyline points="5,5 50,50 5,95" />
                </svg>
            </button>
        </div>
    </div>
</astro-main-carousel>

<script>
    class MainProductCarousel extends HTMLElement {
        constructor(){
            super();

            const isDesktop = window.matchMedia && matchMedia("(pointer:fine)").matches;
            const id = this.dataset.id
            const radios = this.querySelectorAll(`input[name="${id}"]`) as NodeListOf<HTMLInputElement>
            const container = this.getElementsByTagName('div')[0]

            let index = 0
            const len = +(this.dataset.len)
            const lenValid = !isNaN(len)

            const leftward = () => {
                index--
                if (index < 0 && lenValid) index = len - 1;
                radios[index].click()
            }

            const rightward = () => {
                index++
                if (lenValid && index === len) index = 0;
                radios[index].click()
            }

            if (isDesktop){
                const btnOnClick = (e:MouseEvent) => {
                    const leftwardBtnID = 'main-carousel-leftward'
                    const rightwardBtnID = 'main-carousel-rightward'
                    const currentElem = e.target as HTMLElement
                    const leftwardBtn = currentElem.closest('#' + leftwardBtnID)
                    const rightwardBtn = currentElem.closest('#' + rightwardBtnID)
                    if (!!leftwardBtn || !!rightwardBtn){
                        e.preventDefault()
                        !!leftwardBtn ? leftward() : rightward()
                    }
                }

                document.addEventListener('click',btnOnClick,true)
            } else {
                const limit = 20
                let touchStartX = 0
                const containerID = container.id

                const onTouchStart = (e:TouchEvent) => {
                    const containerElem = (e.changedTouches[0].target as HTMLElement).closest('#' + containerID)
                    if (!!containerElem) touchStartX = e.changedTouches[0].clientX
                }

                const onTouchEnd = (e:TouchEvent) => {
                    const containerElem = (e.changedTouches[0].target as HTMLElement).closest('#' + containerID)
                    if (!containerElem) return
                    const currentX = e.changedTouches[0].clientX
                    if (Math.abs(currentX - touchStartX) > limit) currentX > touchStartX ? leftward() : rightward()
                }

                document.addEventListener('touchstart',onTouchStart,{passive:false})
                document.addEventListener('touchend',onTouchEnd,{passive:false})
            }
        }
    }

    customElements.define('astro-main-carousel', MainProductCarousel)
</script>